syntax = "proto3";
package atomone.multisig.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "atomone/multisig/v1/multisig.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/atomone-hub/atomone/x/multisig/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateAccount defines a method to create new multisig account.
  rpc CreateAccount(MsgCreateAccount) returns (MsgCreateAccountResponse);

  // CreateProposal defines a method to create new multisig proposal.
  rpc CreateProposal(MsgCreateProposal) returns (MsgCreateProposalResponse);

  // Vote defines a method to vote on a multisig proposal.
  rpc Vote(MsgVote) returns (MsgVoteResponse);

  // UpdateParams defines a governance operation for updating the x/multisig
  // module parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateAccount is used to create a multisig account.
message MsgCreateAccount {
  option (amino.name) = "atomone/multisig/v1/MsgCreateAccount";

  // sender is the address of the sender of this message.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // members are the members of the multisig account.
  repeated Member members = 2;
  // threshold is the minimum weight required for a proposal to pass.
  int64 threshold = 3;
}

// MsgCreateAccountResponse is the response returned after multisig account
// creation.
message MsgCreateAccountResponse {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgCreateProposal is used to create a multisig proposal.
message MsgCreateProposal {
  option (amino.name) = "atomone/multisig/v1/MsgCreateProposal";

  // sender is the address of the sender of this message.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // account_address is the multisig account address
  string account_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // title is the title of the proposal.
  string title = 3;
  // summary is the summary of the proposal.
  string summary = 4;
  // messages are the messages that will be executed
  repeated google.protobuf.Any messages = 5;
}

// MsgCreateProposalResponse is the response returned after multisig proposal
// creation.
message MsgCreateProposalResponse {
  uint64 proposal_id = 1;
}

// MsgVote is used to vote on a multisig proposal.
message MsgVote {
  option (amino.name) = "atomone/multisig/v1/MsgVote";
 
  // voter is the voter account address.
  string voter = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // account_address is the multisig account address.
  string account_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // proposal_id is the multisig proposal id.
  uint64 proposal_id = 3;
  // vote is the vote to cast to the multisig proposal.
  VoteOption vote = 4;
}

// MsgVoteResponse is the response returned after multisig proposal vote.
message MsgVoteResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "atomone/x/multisig/v1/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/gov parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
