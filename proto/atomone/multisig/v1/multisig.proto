syntax = "proto3";
package atomone.multisig.v1;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/atomone-hub/atomone/x/multisig/types";

// Params defines the parameters for the module.
message Params {}

// Account defines a multisig account.
message Account {
  // address hold the bech32 address of the account
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.addressstring" ];
  // creator holds the address of the creator of the multisig account.
  string creator = 2 [ (cosmos_proto.scalar) = "cosmos.addressstring" ];
  // members are the members of the multisig account.
  repeated Member members = 3 [ (gogoproto.nullable) = false ];
  // threshold is the minimum weight required for a proposal to pass.
  int64 threshold = 4;
}

// Member defines the member of the multisig account.
message Member {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 weight = 2;
}

// Proposal defines the structure of a proposal.
message Proposal {
  // id defines the unique id of the proposal.
  uint64 id = 1;
  // account_address holds the bech32 address of the account.
  string account_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // submit_time is the time of proposal submission.
  google.protobuf.Timestamp submit_time = 3 [(gogoproto.stdtime) = true];
  // Proposer is the address of the proposal sumbitter
  string proposer = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // title is the title of the proposal.
  string title = 5;
  // summary is the summary of the proposal.
  string summary = 6;
  // messages are the messages that will be executed.
  repeated google.protobuf.Any messages = 7;
}

message Vote {
  // voter_address holds the bech32 address of the voter.
  string voter_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // vote holds the vote option.
  VoteOption vote = 2;
}

// VoteOption enumerates the valid vote options for a given proposal.
enum VoteOption {
  // VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  VOTE_OPTION_UNSPECIFIED = 0;
  // VOTE_OPTION_YES defines the yes proposal vote option.
  VOTE_OPTION_YES = 1;
  // VOTE_OPTION_ABSTAIN defines the abstain proposal vote option.
  VOTE_OPTION_ABSTAIN = 2;
  // VOTE_OPTION_NO defines the no proposal vote option.
  VOTE_OPTION_NO = 3;
}
