syntax = "proto3";
package atomone.multisig.v1;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/atomone-hub/atomone/x/multisig/types";

// Params defines the parameters for the module.
message Params {}

// Account defines a multisig account.
message Account {
  // address hold the bech32 address of the account
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.addressstring" ];
  // creator holds the address of the creator of the multisig account.
  string creator = 2 [ (cosmos_proto.scalar) = "cosmos.addressstring" ];
  // members are the members of the multisig account.
  repeated Member members = 3 [ (gogoproto.nullable) = false ];
  // threshold is the minimum weight required for a proposal to pass.
  uint64 threshold = 4;
}

// Member defines the member of the multisig account.
message Member {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 weight = 2;
}

// Proposal defines the structure of a proposal.
message Proposal {
  // id defines the unique id of the proposal.
  uint64 id = 1;
  // account_address holds the bech32 address of the account.
  string account_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // status defines the proposal status.
  ProposalStatus status = 3;
  // submit_time is the time of proposal submission.
  google.protobuf.Timestamp submit_time = 4 [ (gogoproto.stdtime) = true ];
  // exec_time is the time of the execution of the proposal.
  google.protobuf.Timestamp exec_time = 5 [ (gogoproto.stdtime) = true ];
  // Proposer is the address of the proposal sumbitter
  string proposer = 6 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // title is the title of the proposal.
  string title = 7;
  // summary is the summary of the proposal.
  string summary = 8;
  // messages are the messages that will be executed.
  repeated google.protobuf.Any messages = 9;
}

// ProposalStatus enumerates the valid status for a given proposal.
enum ProposalStatus {
  // PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
  // period.
  PROPOSAL_STATUS_VOTING_PERIOD = 0;
  // PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
  PROPOSAL_STATUS_PASSED = 1;
  // PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
  // failed.
  PROPOSAL_STATUS_FAILED = 2;
}

message Vote {
  // account_address holds the bech32 address of the account.
  string account_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // proposal_id holds the id of the proposal.
  uint64 proposal_id = 2;
  // voter_address holds the bech32 address of the voter.
  string voter_address = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // vote holds the vote option.
  VoteOption vote = 4;
}

// VoteOption enumerates the valid vote options for a given proposal.
enum VoteOption {
  // VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  VOTE_OPTION_UNSPECIFIED = 0;
  // VOTE_OPTION_YES defines the yes proposal vote option.
  VOTE_OPTION_YES = 1;
  // VOTE_OPTION_ABSTAIN defines the abstain proposal vote option.
  VOTE_OPTION_ABSTAIN = 2;
  // VOTE_OPTION_NO defines the no proposal vote option.
  VOTE_OPTION_NO = 3;
}
