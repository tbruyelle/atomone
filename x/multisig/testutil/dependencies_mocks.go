// Code generated by MockGen. DO NOT EDIT.
// Source: x/multisig/types/dependencies.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockRouter) Handler(msg types.Msg) func(types.Context, types.Msg) (*types.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", msg)
	ret0, _ := ret[0].(func(types.Context, types.Msg) (*types.Result, error))
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockRouterMockRecorder) Handler(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockRouter)(nil).Handler), msg)
}
